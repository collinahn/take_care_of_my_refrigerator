# -*- coding: utf-8 -*-
"""ocr_by_gptapi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MA40C0TKiMpneeFomajWukvCnAY7NgRw
"""

from google.colab import drive
drive.mount('/content/drive')

"""### **함수로 만들기**"""

from openai import OpenAI
import base64
import requests
import re

def receipt_ocr_gptapi(image_path):
    # 이미지 인코딩 함수
    def encode_image(image_path):
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')

    # 이미지 인코딩
    base64_image = encode_image(image_path)

    # API KEY 지정
    api_key = '키입력(유출우려있어서 따로 입력부탁)'

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    # 모델 선택 및 내용 전달
    payload = {
        "model": "gpt-4o",
        "messages": [
            {"role": 'system', 'content': "너는 영수증 이미지에서 식재료와 관련정보를 추출하는 역할을 할거야"},
            {"role": "user", "content": [
                {"type": "text",
                 "text": "업로드된 사진은 영수증 이미지야. 영수증에서 다음을 추출해줘. \n 1. 재료명 \n 2. 보관방법 : 냉장/냉동/실온으로 분류 \n3. 카테고리 : 과일류/육류/해산물/채소류/유제품/간식류로 분류 \n 재료별로 추출한 후, 다음과 같은 리스트 안 딕셔너리 형태로 저장해줘. 변수명은 purchse_item으로 해주고, 다음과 같은 형태로 만들어줘. [{name : '다진마늘, save : 냉장, category : 채소}, {~ }. {~ },]"
                 },
                {"type": "image_url",
                 "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
                 }
            ]
            },
        ],
        "max_tokens": 300
    }

    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

    # 선택된 메시지의 content만 따로 추출하여 저장
    gpt_answer = response.json()['choices'][0]['message']['content']

    # gpt 답변에서 딕셔너리 리스트만 추출하여 purchase_item으로 저장
    pattern = r"['\"]name['\"]:\s*['\"](.*?)['\"],\s*['\"]save['\"]:\s*['\"](.*?)['\"],\s*['\"]category['\"]:\s*['\"](.*?)['\"]"
    purchase_item = re.findall(pattern, gpt_answer)
    purchase_item = [{'name': item[0], 'save': item[1], 'category': item[2]} for item in purchase_item]

    return purchase_item

# 함수 호출
image_path = '/content/drive/MyDrive/Colab Notebooks/종합설계/ocr_ex3.jpg'
print(receipt_ocr_gptapi(image_path))

"""### **unique_list로 분류하면???**"""

# 식재료 리스트 불러오기
with open('/content/drive/MyDrive/Colab Notebooks/종합설계/unique_list.txt', 'r', encoding='utf-8') as f:
    unique_list = [line.strip() for line in f]

# unique_list로 분류한거
from openai import OpenAI
import base64
import requests

# OpenAI API Key : api_key

# Function to encode the image
def encode_image(image_path):
  with open(image_path, "rb") as image_file:
    return base64.b64encode(image_file.read()).decode('utf-8')

# Path to your image : image_path

# Getting the base64 string
base64_image = encode_image(image_path)

headers = {
  "Content-Type": "application/json",
  "Authorization": f"Bearer {api_key}"
}

payload = {
  "model": "gpt-4o",
  "messages":
   [
    {"role" : 'system', 'content' : "너는 영수증 이미지에서 식재료와 관련정보를 추출하는 역할을 할거야"},
    {"role": "user", "content":
        [
        {"type": "text",
         "text": "업로드된 사진은 영수증 이미지야. 영수증에서 다음을 추출해줘. \n 1. 재료명(unique_list의 요소중 가장 근접한 걸로 분류해줘) \n 2. 보관방법 : 냉장/냉동/실온으로 분류 \n3. 카테고리 : 과일류/육류/해산물/채소류/유제품/간식류로 분류 \n 재료별로 추출한 후, 다음과 같은 리스트 안 딕셔너리 형태로 저장해줘. 변수명은 purchse_item으로 해주고, 다음과 같은 형태로 만들어줘. [{name : '다진마늘, save : 냉장, category : 채소}, {~ }. {~ },]"
        },
        {"type": "image_url",
          "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
        }
       ]
      },
     {"role" : 'assistant', 'content' : "Yes"},
     {"role" : 'user', 'content' : unique_list},
     {"role" : 'user', 'content' : "purchase_item의 재료명을 unique_list의 요소중 가장 근접한 걸로 분류해주고, purchase_item을 바로 복사해서 쓸 수 있게 정의해줘"},
   ],
  "max_tokens": 300
}

response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

# 선택된 메시지의 content만 따로 추출하여 저장
chosen_message_content = response.json()['choices'][0]['message']['content']

# 결과 출력
print(chosen_message_content)

